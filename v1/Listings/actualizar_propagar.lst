


ARM Macro Assembler    Page 1 


    1 00000000         ; Funcion: 
    2 00000000         ; Función candidatos_actualizar_arm_arm, adaptación de l
                       as funciones actualizar y propagar en arm con inlining. 
                       
    3 00000000         ; Parametros: 
    4 00000000         ; CELDA cuadricula[NUM_FILAS][NUM_COLUMNAS] es la celda 
                       a tratar lo pasamos por R0
    5 00000000         ; Descripcion:
    6 00000000         ;  Calcula todas las listas de candidatos (9x9) necesari
                       o tras borrar o cambiar un valor (listas corrompidas)
    7 00000000         ;  retorna el numero de celdas vacias Init del sudoku en
                        codigo C invocando a propagar en C
    8 00000000         ;  Recibe la cuadricula como primer parametro y devuelve
                        en celdas_vacias el numero de celdas vacias
    9 00000000         ;   La función incorpora ambos códigos en arm tanto el d
                       e actualizar como el de propagar sin llamadas
   10 00000000         ;   ahorrando así el tiempo que supone la llamada a la f
                       unción propagar
   11 00000000                 PRESERVE8
   12 00000000                 AREA             DATOS, data
   13 00000000 00 00 00 
              03 03 03 
              06 06 06 region  DCB              0,0,0,3,3,3,6,6,6
   14 00000009                 AREA             f_candidatos_actualizar_arm_arm
, CODE, READONLY
   15 00000000                 EXPORT           candidatos_actualizar_arm_arm
   16 00000000         candidatos_actualizar_arm_arm
   17 00000000 E92D43F0        STMDB            R13!,{R4-R9,R14}
   18 00000004 E1A06000        MOV              R6,R0       ; MOVEMOS A R6 CUAD
                                                            RICULA
   19 00000008 E3A07000        MOV              R7,#0x00000000 ; R7 ES CELDAS V
                                                            ACIAS = 0
   20 0000000C E3A08000        MOV              R8,#0x00000000 ; R8 ES i
   21 00000010         INI_I
   22 00000010 E3580009        CMP              R8,#0x00000009 ; i < NUM_FILAS
   23 00000014 0A00000B        BEQ              FUERA_I
   24 00000018 E3A09000        MOV              R9,#0x00000000 ; R9 ES j
   25 0000001C         INI_J
   26 0000001C E3590009        CMP              R9,#0x00000009 ; j < NUM_FILAS
   27 00000020 0A000006        BEQ              FUERA_J
   28 00000024 E0861288        ADD              R1,R6,R8,LSL #5 ; INLINE FUNCIO
                                                            N celda_establecer_
                                                            todos_candidatos LS
                                                            L #5 es para despla
                                                            zar $r8 bytes
   29 00000028 E0810089        ADD              R0,R1,R9,LSL #1 ; En R0 guardam
                                                            os la direccion de 
                                                            la celda
   30 0000002C E5D01000        LDRB             R1,[R0]     ; R1 = contenido de
                                                             la celda
   31 00000030 E201107F        AND              R1,R1,#0x0000007F ; Ponemos los
                                                             candidatos a 0
   32 00000034 E1C010B0        STRH             R1,[R0]
   33 00000038 E2899001        ADD              R9,R9,#0x00000001 ; j++
   34 0000003C EAFFFFF6        B                INI_J
   35 00000040         FUERA_J
   36 00000040 E2888001        ADD              R8,R8,#0x00000001 ; i++
   37 00000044 EAFFFFF1        B                INI_I
   38 00000048         FUERA_I



ARM Macro Assembler    Page 2 


   39 00000048 E3A08000        MOV              R8,#0x00000000 ; R8 ES i
   40 0000004C         INI_I_2
   41 0000004C E3580009        CMP              R8,#0x00000009 ; i < NUM_FILAS
   42 00000050 0A00004E        BEQ              FUERA_I_2
   43 00000054 E3A09000        MOV              R9,#0x00000000 ; R9 ES j
   44 00000058         INI_J_2
   45 00000058 E3590009        CMP              R9,#0x00000009 ; i < NUM_FILAS
   46 0000005C 0A000049        BEQ              FUERA_J_2
   47 00000060 E0861288        ADD              R1,R6,R8,LSL #5 ; INLINE CELDA_
                                                            LEER_VALOR
   48 00000064 E0811089        ADD              R1,R1,R9,LSL #1 ; En R1 guardam
                                                            os la direccion de 
                                                            la celda
   49 00000068 E1D100B0        LDRH             R0,[R1]     ; R1 = contenido de
                                                             la celda
   50 0000006C E200100F        AND              R1,R0,#0x0000000F ; Cogemos sol
                                                            o el valor
   51 00000070 E3510000        CMP              R1,#0x00000000 ; Valor != 0
   52 00000074 02877001        ADDEQ            R7,R7,#0x00000001 
                                                            ; CELDAS VAC?AS ++
   53 00000078 0A000040        BEQ              FIN_PROPAGAR
   54 0000007C 11A01008        MOVNE            R1,R8       ; PARAMETRO I
   55 00000080 11A02009        MOVNE            R2,R9       ; PARAMETRO J
   56 00000084 11A00006        MOVNE            R0,R6       ; PARAMETRO CUADRIC
                                                            ULA
   57 00000088         ;-------------------------------------------------------
                       --------------------------------BLNE candidatos_propagar
                       _arm
   58 00000088 E92D07F0        STMDB            R13!,{R4-R10}
   59 0000008C E1A06000        MOV              R6,R0       ;@cuadricula
   60 00000090 E1A07001        MOV              R7,R1       ; fila
   61 00000094 E1A08002        MOV              R8,R2       ; columna
   62 00000098         
   63 00000098 E59F20FC        LDR              R2,=region  ; @ del inicio del 
                                                            vector region  
   64 0000009C         
   65 0000009C E0860287        ADD              R0,R6,R7,LSL #5 ; valor = celda
                                                            _leer_valor
   66 000000A0 E0801088        ADD              R1,R0,R8,LSL #1 ; R1 = @ celda
   67 000000A4 E1D100B0        LDRH             R0,[R1]     ; celda
   68 000000A8 E200100F        AND              R1,R0,#0x0000000F ; R1 = valor 
                                                            
   69 000000AC E3A09000        MOV              R9,#0x00000000 ; R9 es la j del
                                                             primer for (iterad
                                                            or)
   70 000000B0         INI_FOR_1_AUX
   71 000000B0 E3590009        CMP              R9,#0x00000009
   72 000000B4 0A00000A        BEQ              FIN_FOR_1_AUX
   73 000000B8 E0864287        ADD              R4,R6,R7,LSL #5 ; @ fila
   74 000000BC E0840089        ADD              R0,R4,R9,LSL #1 ; R0 es la @ de
                                                             la celda
   75 000000C0         ;LDR R1,[R13] 
   76 000000C0         ;celda eliminar candidatos
   77 000000C0 E3A04007        MOV              R4,#0x00000007
   78 000000C4 E1D050B0        LDRH             R5,[R0]     ; R5 = celdaptr
   79 000000C8 E2413001        SUB              R3,R1,#0x00000001 ; valor - 1
   80 000000CC E0844003        ADD              R4,R4,R3    ; 7 + (valor - 1)
   81 000000D0 E3A0A001        MOV              R10,#0x00000001
   82 000000D4 E185541A        ORR              R5,R5,R10,LSL R4 ; celdaptr OR 



ARM Macro Assembler    Page 3 


                                                            7 + (valor - 1)
   83 000000D8 E1C050B0        STRH             R5,[R0]
   84 000000DC         ;fin celda eliminar candidatos 
   85 000000DC E2899001        ADD              R9,R9,#0x00000001 ; i++
   86 000000E0 EAFFFFF2        B                INI_FOR_1_AUX
   87 000000E4         FIN_FOR_1_AUX
   88 000000E4 E3A09000        MOV              R9,#0x00000000 ; R9 es la i del
                                                             segundo for
   89 000000E8         INI_FOR_2_AUX
   90 000000E8 E3590009        CMP              R9,#0x00000009
   91 000000EC 0A00000A        BEQ              FIN_FOR_2_AUX
   92 000000F0 E0864289        ADD              R4,R6,R9,LSL #5 ; @ columna
   93 000000F4 E0840088        ADD              R0,R4,R8,LSL #1 ; R0 = @ celda
   94 000000F8         ; celda eliminar candidatos
   95 000000F8 E3A04007        MOV              R4,#0x00000007
   96 000000FC E1D050B0        LDRH             R5,[R0]     ; R5 = celdaptr
   97 00000100 E2413001        SUB              R3,R1,#0x00000001 ; valor - 1
   98 00000104 E0844003        ADD              R4,R4,R3    ; 7 + (valor - 1)
   99 00000108 E3A0A001        MOV              R10,#0x00000001
  100 0000010C E185541A        ORR              R5,R5,R10,LSL R4 ; celdaptr OR 
                                                            7 + (valor - 1)
  101 00000110 E1C050B0        STRH             R5,[R0]
  102 00000114         ;fin celda eliminar candidatos 
  103 00000114 E2899001        ADD              R9,R9,#0x00000001 ; i++
  104 00000118 EAFFFFF2        B                INI_FOR_2_AUX
  105 0000011C         FIN_FOR_2_AUX
  106 0000011C         
  107 0000011C E0824007        ADD              R4,R2,R7
  108 00000120 E5D43000        LDRB             R3,[R4]     ; R3 = init_region[
                                                            fila]
  109 00000124 E0824008        ADD              R4,R2,R8
  110 00000128 E5D45000        LDRB             R5,[R4]     ; R5 = init_region[
                                                            columna]
  111 0000012C E2834003        ADD              R4,R3,#0x00000003 ; R4 = end_i
  112 00000130 E2859003        ADD              R9,R5,#0x00000003 ; R9 = end_j 
                                                            
  113 00000134         INI_I_AUX
  114 00000134 E1530004        CMP              R3,R4       ; i > end_i
  115 00000138 0A00000F        BEQ              FUERA_I_AUX
  116 0000013C E1A0A005        MOV              R10,R5      ; j = init_region[c
                                                            olumna]
  117 00000140         INI_J_AUX
  118 00000140 E15A0009        CMP              R10,R9      ; j < end_j
  119 00000144 0A00000A        BEQ              FUERA_J_AUX
  120 00000148 E0862283        ADD              R2,R6,R3,LSL #5
  121 0000014C E082008A        ADD              R0,R2,R10,LSL #1 ; R0 = cuadric
                                                            ula[i][j]
  122 00000150         ; celda eliminar candidatos
  123 00000150 E3A07007        MOV              R7,#0x00000007
  124 00000154 E1D020B0        LDRH             R2,[R0]     ; R2 = contenido de
                                                             la celda
  125 00000158 E2418001        SUB              R8,R1,#0x00000001 ; valor - 1
  126 0000015C E0877008        ADD              R7,R7,R8    ; 7 + (valor - 1)
  127 00000160 E3A08001        MOV              R8,#0x00000001
  128 00000164 E1822718        ORR              R2,R2,R8,LSL R7 ; celdaptr OR 7
                                                             + (valor - 1)
  129 00000168 E1C020B0        STRH             R2,[R0]
  130 0000016C         ; fin celda eliminar candidatos     
  131 0000016C E28AA001        ADD              R10,R10,#0x00000001 ; j++



ARM Macro Assembler    Page 4 


  132 00000170 EAFFFFF2        B                INI_J_AUX
  133 00000174         FUERA_J_AUX
  134 00000174 E2833001        ADD              R3,R3,#0x00000001 ; i++
  135 00000178 EAFFFFED        B                INI_I_AUX
  136 0000017C         FUERA_I_AUX
  137 0000017C E8BD07F0        LDMIA            R13!,{R4-R10}
  138 00000180         ;-------------------------------------------------------
                       --------------------------------FIN candidatos_propagar
  139 00000180         FIN_PROPAGAR
  140 00000180 E2899001        ADD              R9,R9,#0x00000001 ; j++
  141 00000184 EAFFFFB3        B                INI_J_2
  142 00000188         FUERA_J_2
  143 00000188 E2888001        ADD              R8,R8,#0x00000001 ; i++
  144 0000018C EAFFFFAE        B                INI_I_2
  145 00000190         FUERA_I_2
  146 00000190 E1A00007        MOV              R0,R7       ; Pasamos Celdad Va
                                                            cias a R0 para reto
                                                            rnarlo
  147 00000194 E8BD43F0        LDMIA            R13!,{R4-R9,R14}
  148 00000198 E12FFF1E        BX               R14
  149 0000019C         
  150 0000019C                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\actualizar_propagar.d -o.\objects\actualizar_propagar.o -IC:\Keil_v5\ARM
\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --predefi
ne="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --list=.\listings\a
ctualizar_propagar.lst Actualizar_Propagar.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATOS 00000000

Symbol: DATOS
   Definitions
      At line 12 in file Actualizar_Propagar.s
   Uses
      None
Comment: DATOS unused
region 00000000

Symbol: region
   Definitions
      At line 13 in file Actualizar_Propagar.s
   Uses
      At line 63 in file Actualizar_Propagar.s
Comment: region used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FIN_FOR_1_AUX 000000E4

Symbol: FIN_FOR_1_AUX
   Definitions
      At line 87 in file Actualizar_Propagar.s
   Uses
      At line 72 in file Actualizar_Propagar.s
Comment: FIN_FOR_1_AUX used once
FIN_FOR_2_AUX 0000011C

Symbol: FIN_FOR_2_AUX
   Definitions
      At line 105 in file Actualizar_Propagar.s
   Uses
      At line 91 in file Actualizar_Propagar.s
Comment: FIN_FOR_2_AUX used once
FIN_PROPAGAR 00000180

Symbol: FIN_PROPAGAR
   Definitions
      At line 139 in file Actualizar_Propagar.s
   Uses
      At line 53 in file Actualizar_Propagar.s
Comment: FIN_PROPAGAR used once
FUERA_I 00000048

Symbol: FUERA_I
   Definitions
      At line 38 in file Actualizar_Propagar.s
   Uses
      At line 23 in file Actualizar_Propagar.s
Comment: FUERA_I used once
FUERA_I_2 00000190

Symbol: FUERA_I_2
   Definitions
      At line 145 in file Actualizar_Propagar.s
   Uses
      At line 42 in file Actualizar_Propagar.s
Comment: FUERA_I_2 used once
FUERA_I_AUX 0000017C

Symbol: FUERA_I_AUX
   Definitions
      At line 136 in file Actualizar_Propagar.s
   Uses
      At line 115 in file Actualizar_Propagar.s
Comment: FUERA_I_AUX used once
FUERA_J 00000040

Symbol: FUERA_J
   Definitions
      At line 35 in file Actualizar_Propagar.s
   Uses
      At line 27 in file Actualizar_Propagar.s
Comment: FUERA_J used once
FUERA_J_2 00000188

Symbol: FUERA_J_2



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 142 in file Actualizar_Propagar.s
   Uses
      At line 46 in file Actualizar_Propagar.s
Comment: FUERA_J_2 used once
FUERA_J_AUX 00000174

Symbol: FUERA_J_AUX
   Definitions
      At line 133 in file Actualizar_Propagar.s
   Uses
      At line 119 in file Actualizar_Propagar.s
Comment: FUERA_J_AUX used once
INI_FOR_1_AUX 000000B0

Symbol: INI_FOR_1_AUX
   Definitions
      At line 70 in file Actualizar_Propagar.s
   Uses
      At line 86 in file Actualizar_Propagar.s
Comment: INI_FOR_1_AUX used once
INI_FOR_2_AUX 000000E8

Symbol: INI_FOR_2_AUX
   Definitions
      At line 89 in file Actualizar_Propagar.s
   Uses
      At line 104 in file Actualizar_Propagar.s
Comment: INI_FOR_2_AUX used once
INI_I 00000010

Symbol: INI_I
   Definitions
      At line 21 in file Actualizar_Propagar.s
   Uses
      At line 37 in file Actualizar_Propagar.s
Comment: INI_I used once
INI_I_2 0000004C

Symbol: INI_I_2
   Definitions
      At line 40 in file Actualizar_Propagar.s
   Uses
      At line 144 in file Actualizar_Propagar.s
Comment: INI_I_2 used once
INI_I_AUX 00000134

Symbol: INI_I_AUX
   Definitions
      At line 113 in file Actualizar_Propagar.s
   Uses
      At line 135 in file Actualizar_Propagar.s
Comment: INI_I_AUX used once
INI_J 0000001C

Symbol: INI_J
   Definitions
      At line 25 in file Actualizar_Propagar.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 34 in file Actualizar_Propagar.s
Comment: INI_J used once
INI_J_2 00000058

Symbol: INI_J_2
   Definitions
      At line 44 in file Actualizar_Propagar.s
   Uses
      At line 141 in file Actualizar_Propagar.s
Comment: INI_J_2 used once
INI_J_AUX 00000140

Symbol: INI_J_AUX
   Definitions
      At line 117 in file Actualizar_Propagar.s
   Uses
      At line 132 in file Actualizar_Propagar.s
Comment: INI_J_AUX used once
candidatos_actualizar_arm_arm 00000000

Symbol: candidatos_actualizar_arm_arm
   Definitions
      At line 16 in file Actualizar_Propagar.s
   Uses
      At line 15 in file Actualizar_Propagar.s
Comment: candidatos_actualizar_arm_arm used once
f_candidatos_actualizar_arm_arm 00000000

Symbol: f_candidatos_actualizar_arm_arm
   Definitions
      At line 14 in file Actualizar_Propagar.s
   Uses
      None
Comment: f_candidatos_actualizar_arm_arm unused
19 symbols
355 symbols in table
